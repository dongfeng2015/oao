@page "/account-opening"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@namespace AccountOpening.Web.Pages
@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components.Routing

<PageTitle>Open Account</PageTitle>

<div class="account-opening-form">
    <EditForm EditContext="@editContext">
        <DataAnnotationsValidator />
        @if (step == 1)
        {
            <div class="form-step">
                <label>First Name</label>
                <InputText @bind-Value="formData.FirstName" class="form-input" @attributes="GetInputClass(() => formData.FirstName)" />
                <ValidationMessage For="@(() => formData.FirstName)" />
                <label>Last Name</label>
                <InputText @bind-Value="formData.LastName" class="form-input" @attributes="GetInputClass(() => formData.LastName)" />
                <ValidationMessage For="@(() => formData.LastName)" />
                <button type="button" class="next-btn" @onclick="NextStepAsync" disabled="@isSubmitting">Next</button>
            </div>
        }
        else if (step == 2)
        {
            <div class="form-step">
                <label>Address Line 1</label>
                <InputText @bind-Value="formData.AddressLine1" class="form-input" />
                <ValidationMessage For="@(() => formData.AddressLine1)" />
                <label>Address Line 2</label>
                <InputText @bind-Value="formData.AddressLine2" class="form-input" />
                <label>City</label>
                <InputText @bind-Value="formData.City" class="form-input" />
                <ValidationMessage For="@(() => formData.City)" />
                <label>State (2-letter code)</label>
                <InputText @bind-Value="formData.State" class="form-input" maxlength="2" />
                <ValidationMessage For="@(() => formData.State)" />
                <label>Zip/Postal Code</label>
                <InputText @bind-Value="formData.ZipCode" class="form-input" />
                <ValidationMessage For="@(() => formData.ZipCode)" />
                <label>Country</label>
                <InputText @bind-Value="formData.Country" class="form-input" readonly />
                <ValidationMessage For="@(() => formData.Country)" />
                <button type="button" class="prev-btn" @onclick="PrevStep">Back</button>
                <button type="button" class="next-btn" @onclick="NextStepAsync" disabled="@isSubmitting">Next</button>
            </div>
        }
        else if (step == 3)
        {
            <div class="form-step">
                <label>SSN (9 digits, no dashes)</label>
                <InputText @bind-Value="formData.SSN" class="form-input" maxlength="9" />
                <ValidationMessage For="@(() => formData.SSN)" />
                <label>Email Address</label>
                <InputText @bind-Value="formData.Email" class="form-input" />
                <ValidationMessage For="@(() => formData.Email)" />
                <label>Date of Birth (YYYY-MM-DD)</label>
                <InputText @bind-Value="formData.DateOfBirth" class="form-input" placeholder="YYYY-MM-DD" />
                <ValidationMessage For="@(() => formData.DateOfBirth)" />
                <button type="button" class="prev-btn" @onclick="PrevStep">Back</button>
                <button type="button" class="submit-btn" @onclick="SubmitFormAsync" disabled="@isSubmitting">Submit</button>
                @if (isSubmitting)
                {
                    <p>Submitting...</p>
                }
                @if (!string.IsNullOrEmpty(submitError))
                {
                    <p class="text-danger">@submitError</p>
                }
            </div>
        }
        else if (step == 4)
        {
            <div class="form-step">
                <h3>Thank you!</h3>
                <p>Your application has been submitted.</p>
            </div>
        }
    </EditForm>
</div>

@code {
    [Inject]
    private HttpClient? Http { get; set; }

    private int step = 1;
    private AccountOpeningForm formData = new AccountOpeningForm();
    private bool isSubmitting = false;
    private string? submitError;

    private EditContext editContext = new EditContext(new AccountOpeningForm());

    protected override void OnInitialized()
    {
        editContext = new EditContext(formData);
    }

    private Dictionary<string, object> GetInputClass(Expression<Func<object>> field)
    {
        var isInvalid = editContext.GetValidationMessages(field).Any();
        return isInvalid ? new Dictionary<string, object> { ["class"] = "form-input input-invalid" } : new Dictionary<string, object>();
    }

   private async Task NextStepAsync()
{
    submitError = null;

    // Step 1: Validate only the name fields
    if (step == 1)
    {
        // Trigger validation messages on those two fields
        if (string.IsNullOrWhiteSpace(formData.FirstName))
            editContext.NotifyFieldChanged(new FieldIdentifier(formData, nameof(formData.FirstName)));
        if (string.IsNullOrWhiteSpace(formData.LastName))
            editContext.NotifyFieldChanged(new FieldIdentifier(formData, nameof(formData.LastName)));

        // If either is blank, bail out
        if (string.IsNullOrWhiteSpace(formData.FirstName) ||
            string.IsNullOrWhiteSpace(formData.LastName))
        {
            return;
        }

        step++;
        return;
    }

    // Step 2: Validate all address inputs
    if (step == 2)
    {
        if (!editContext.Validate())
            return;

        // Ensure country is set before moving on
        formData.Country = "US";

        step++;
        return;
    }

    // Step 3: Persist via API then advance
    isSubmitting = true;
    try
    {
        if (Http is null)
        {
            submitError = "HttpClient is not available.";
            return;
        }

        var saveResponse = await Http.PostAsJsonAsync("api/accountopening/save", formData);
        if (!saveResponse.IsSuccessStatusCode)
        {
            submitError = "Save failed. Please try again.";
            return;
        }

        step++;
    }
    catch (Exception ex)
    {
        submitError = $"Error: {ex.Message}";
    }
    finally
    {
        isSubmitting = false;
    }
}

    private void PrevStep()
    {
        if (step > 1)
        {
            step--;
        }
    }

    private async Task SubmitFormAsync()
    {
        isSubmitting = true;
        submitError = null;
        try
        {
            if (Http is null)
            {
                submitError = "HttpClient is not available.";
                isSubmitting = false;
                return;
            }
            // Replace with your API endpoint
            var response = await Http.PostAsJsonAsync("api/accountopening", formData);
            if (response.IsSuccessStatusCode)
            {
                step = 4;
            }
            else
            {
                submitError = "Submission failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            submitError = $"Error: {ex.Message}";
        }
        isSubmitting = false;
    }

    public class AccountOpeningForm
    {
        [Required]
        public string? FirstName { get; set; }
        [Required]
        public string? LastName { get; set; }
        [Required]
        public string? AddressLine1 { get; set; }
        public string? AddressLine2 { get; set; }
        [Required]
        public string? City { get; set; }
        [Required]
        [RegularExpression("^[A-Z]{2}$", ErrorMessage = "State must be a two-letter code.")]
        public string? State { get; set; }
        [Required]
        public string? ZipCode { get; set; }
        [Required]
        [RegularExpression("^US$", ErrorMessage = "Country must be US.")]
        public string? Country { get; set; } = "US";
        [Required]
        [RegularExpression("^[0-9]{9}$", ErrorMessage = "SSN must be 9 digits.")]
        public string? SSN { get; set; }
        [Required]
        [EmailAddress]
        public string? Email { get; set; }
        [Required]
        [RegularExpression("^\\d{4}-\\d{2}-\\d{2}$", ErrorMessage = "Date of Birth must be YYYY-MM-DD.")]
        public string? DateOfBirth { get; set; }
    }
}
